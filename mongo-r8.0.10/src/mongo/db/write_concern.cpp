/**
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 */


#include "mongo/db/write_concern.h"

#include <boost/optional.hpp>
#include <cstddef>
#include <cstdint>
#include <fmt/format.h>
#include <memory>
#include <variant>

#include <absl/container/node_hash_map.h>
#include <boost/move/utility_core.hpp>
#include <boost/optional/optional.hpp>

#include "mongo/base/error_codes.h"
#include "mongo/db/client.h"
#include "mongo/db/cluster_role.h"
#include "mongo/db/commands/server_status_metric.h"
#include "mongo/db/curop.h"
#include "mongo/db/operation_context.h"
#include "mongo/db/read_write_concern_defaults.h"
#include "mongo/db/read_write_concern_defaults_gen.h"
#include "mongo/db/read_write_concern_provenance.h"
#include "mongo/db/repl/optime.h"
#include "mongo/db/repl/repl_settings.h"
#include "mongo/db/repl/replication_coordinator.h"
#include "mongo/db/repl/storage_interface.h"
#include "mongo/db/server_options.h"
#include "mongo/db/service_context.h"
#include "mongo/db/stats/timer_stats.h"
#include "mongo/db/storage/control/journal_flusher.h"
#include "mongo/db/storage/storage_engine.h"
#include "mongo/db/transaction_validation.h"
#include "mongo/db/write_concern_options.h"
#include "mongo/logv2/log.h"
#include "mongo/logv2/log_attr.h"
#include "mongo/logv2/log_component.h"
#include "mongo/platform/compiler.h"
#include "mongo/util/assert_util.h"
#include "mongo/util/duration.h"
#include "mongo/util/fail_point.h"
#include "mongo/util/timer.h"

#define MONGO_LOGV2_DEFAULT_COMPONENT ::mongo::logv2::LogComponent::kReplication


namespace mongo {

using repl::OpTime;
using std::string;

namespace {
auto& gleWtimeStats = *MetricBuilder<TimerStats>{"getLastError.wtime"};
auto& gleWtimeouts = *MetricBuilder<Counter64>{"getLastError.wtimeouts"};
auto& gleDefaultWtimeouts = *MetricBuilder<Counter64>{"getLastError.default.wtimeouts"};
auto& gleDefaultUnsatisfiable = *MetricBuilder<Counter64>{"getLastError.default.unsatisfiable"};
}  // namespace

MONGO_FAIL_POINT_DEFINE(hangBeforeWaitingForWriteConcern);

bool commandSpecifiesWriteConcern(const CommonRequestArgs& requestArgs) {
    return !!requestArgs.getWriteConcern();
}

StatusWith<WriteConcernOptions> extractWriteConcern(OperationContext* opCtx,
                                                    const BSONObj& cmdObj,
                                                    bool isInternalClient) {
    auto wcResult = WriteConcernOptions::extractWCFromCommand(cmdObj);
    if (!wcResult.isOK()) {
        return wcResult.getStatus();
    }

    WriteConcernOptions writeConcern = wcResult.getValue();

    // This is the WC extracted from the command object, so the CWWC or implicit default hasn't been
    // applied yet, which is why "usedDefaultConstructedWC" flag can be used an indicator of whether
    // the client supplied a WC or not.
    // If the user supplied write concern from the command is empty (writeConcern: {}),
    // usedDefaultConstructedWC will be true so we will then use the CWWC or implicit default.
    // Note that specifying writeConcern: {w:0} is not the same as empty. {w:0} differs from {w:1}
    // in that the client will not expect a command reply/acknowledgement at all, even in the case
    // of errors.
    bool clientSuppliedWriteConcern = !writeConcern.usedDefaultConstructedWC;
    bool customDefaultWasApplied = false;

    // WriteConcern defaults can only be applied on regular replica set members.
    // Operations received by shard and config servers should always have WC explicitly specified.
    bool canApplyDefaultWC = serverGlobalParams.clusterRole.has(ClusterRole::None) &&
        repl::ReplicationCoordinator::get(opCtx)->getSettings().isReplSet() &&
        (!opCtx->inMultiDocumentTransaction() ||
         isTransactionCommand(opCtx->getService(), cmdObj.firstElementFieldName())) &&
        !opCtx->getClient()->isInDirectClient() && !isInternalClient;


    // If no write concern is specified in the command, then use the cluster-wide default WC (if
    // there is one), or else the default implicit WC:
    // (if [(#arbiters > 0) AND (#arbiters >= Â½(#voting nodes) - 1)] then {w:1} else {w:majority}).
    if (canApplyDefaultWC) {
        auto getDefaultWC = ([&]() {
            auto rwcDefaults =
                ReadWriteConcernDefaults::get(opCtx->getServiceContext()).getDefault(opCtx);
            auto wcDefault = rwcDefaults.getDefaultWriteConcern();
            const auto defaultWriteConcernSource = rwcDefaults.getDefaultWriteConcernSource();
            customDefaultWasApplied = defaultWriteConcernSource &&
                defaultWriteConcernSource == DefaultWriteConcernSourceEnum::kGlobal;
            return wcDefault;
        });


        if (!clientSuppliedWriteConcern) {
            writeConcern = ([&]() {
                auto wcDefault = getDefaultWC();
                // Default WC can be 'boost::none' if the implicit default is used and set to 'w:1'.
                if (wcDefault) {
                    LOGV2_DEBUG(22548,
                                2,
                                "Applying default writeConcern on {cmdObj_firstElementFieldName} "
                                "of {wcDefault}",
                                "cmdObj_firstElementFieldName"_attr =
                                    cmdObj.firstElementFieldName(),
                                "wcDefault"_attr = wcDefault->toBSON());
                    return *wcDefault;
                }
                return writeConcern;
            })();
            writeConcern.notExplicitWValue = true;
        }
        // Client supplied a write concern object without 'w' field.
        else if (writeConcern.isExplicitWithoutWField()) {
            auto wcDefault = getDefaultWC();
            // Default WC can be 'boost::none' if the implicit default is used and set to 'w:1'.
            if (wcDefault) {
                clientSuppliedWriteConcern = false;
                writeConcern.w = wcDefault->w;
                if (writeConcern.syncMode == WriteConcernOptions::SyncMode::UNSET) {
                    writeConcern.syncMode = wcDefault->syncMode;
                }
            }
        }
    }

    // It's fine for clients to provide any provenance value to mongod. But if they haven't, then an
    // appropriate provenance needs to be determined.
    auto& provenance = writeConcern.getProvenance();
    if (!provenance.hasSource()) {
        if (clientSuppliedWriteConcern) {
            provenance.setSource(ReadWriteConcernProvenance::Source::clientSupplied);
        } else if (customDefaultWasApplied) {
            provenance.setSource(ReadWriteConcernProvenance::Source::customDefault);
        } else if (opCtx->getClient()->isInDirectClient() || isInternalClient) {
            provenance.setSource(ReadWriteConcernProvenance::Source::internalWriteDefault);
        } else {
            provenance.setSource(ReadWriteConcernProvenance::Source::implicitDefault);
        }
    }

    if (writeConcern.syncMode == WriteConcernOptions::SyncMode::NONE && writeConcern.isMajority() &&
        !opCtx->getServiceContext()->getStorageEngine()->isEphemeral()) {
        auto* const replCoord = repl::ReplicationCoordinator::get(opCtx);
        if (replCoord && replCoord->getSettings().isReplSet() &&
            replCoord->getWriteConcernMajorityShouldJournal()) {
            LOGV2_DEBUG(8668500,
                        1,
                        "Overriding write concern majority j:false to j:true",
                        "writeConcern"_attr = writeConcern);
            writeConcern.majorityJFalseOverridden = true;
            writeConcern.syncMode = WriteConcernOptions::SyncMode::JOURNAL;
        }
    }

    Status wcStatus = validateWriteConcern(opCtx, writeConcern);
    if (!wcStatus.isOK()) {
        return wcStatus;
    }

    return writeConcern;
}

Status validateWriteConcern(OperationContext* opCtx, const WriteConcernOptions& writeConcern) {
    if (writeConcern.syncMode == WriteConcernOptions::SyncMode::JOURNAL &&
        opCtx->getServiceContext()->getStorageEngine()->isEphemeral()) {
        return Status(ErrorCodes::BadValue,
                      "cannot use 'j' option when a host does not have journaling enabled");
    }

    if (!repl::ReplicationCoordinator::get(opCtx)->getSettings().isReplSet()) {
        if (holds_alternative<int64_t>(writeConcern.w) && get<int64_t>(writeConcern.w) > 1) {
            return Status(ErrorCodes::BadValue, "cannot use 'w' > 1 when a host is not replicated");
        }

        if (writeConcern.hasCustomWriteMode()) {
            return Status(
                ErrorCodes::BadValue,
                fmt::format("cannot use non-majority 'w' mode \"{}\" when a host is not a "
                            "member of a replica set",
                            get<std::string>(writeConcern.w)));
        }
    }

    return Status::OK();
}

void WriteConcernResult::appendTo(BSONObjBuilder* result) const {
    if (syncMillis >= 0)
        result->appendNumber("syncMillis", syncMillis);

    if (fsyncFiles >= 0)
        result->appendNumber("fsyncFiles", fsyncFiles);

    if (wTime >= 0) {
        if (wTimedOut)
            result->appendNumber("waited", wTime);
        else
            result->appendNumber("wtime", wTime);
    }

    if (wTimedOut)
        result->appendBool("wtimeout", true);

    if (writtenTo.size()) {
        BSONArrayBuilder hosts(result->subarrayStart("writtenTo"));
        for (size_t i = 0; i < writtenTo.size(); ++i) {
            hosts.append(writtenTo[i].toString());
        }
    } else {
        result->appendNull("writtenTo");
    }

    result->append("writeConcern", wcUsed.toBSON());

    if (err.empty())
        result->appendNull("err");
    else
        result->append("err", err);
}

/**
 * Write concern with {j: true} on single voter replica set primaries must wait for no oplog holes
 * behind a write, before flushing to disk (not done in this function), in order to guarantee that
 * a write will remain after unclean shutdown and server restart recovery.
 *
 * Multi-voter replica sets will likely roll back writes if the primary crashes and restarts.
 * However, single voter sets never roll back writes, so we must maintain that behavior. Multi-node
 * single-voter primaries must truncate the oplog to ensure cross-replica set data consistency; and
 * single-node single-voter sets must never lose confirmed writes.
 *
 * The oplogTruncateAfterPoint is updated with the no holes point prior to journal flushing (write
 * persistence). Ensuring the no holes point is past (or equal to) our write, ensures the flush to
 * disk will save a truncate point that will not truncate the new write we wish to guarantee.
 *
 * Can throw on opCtx interruption.
 */
void waitForNoOplogHolesIfNeeded(OperationContext* opCtx) {
    auto const replCoord = repl::ReplicationCoordinator::get(opCtx);
    if (replCoord->getNumConfigVotingMembers() == 1) {
        // It is safe for secondaries in multi-node single voter replica sets to truncate writes if
        // there are oplog holes. They can catch up again.
        repl::StorageInterface::get(opCtx)->waitForAllEarlierOplogWritesToBeVisible(
            opCtx, /*primaryOnly*/ true);
    }
}

/**
 * waitForWriteConcern å½æ°çä½ç¨ï¼
 * ç­å¾åå³æ³¨ï¼Write Concernï¼æ¡ä»¶å¾å°æ»¡è¶³ï¼ç¡®ä¿åæä½è¾¾å°æå®çæä¹æ§åå¤å¶è¦æ±ã
 * 
 * æ ¸å¿åè½ï¼
 * 1. æä¹æ§ä¿è¯ï¼æ ¹æ®åå³æ³¨çåæ­¥æ¨¡å¼ç­å¾æ°æ®å·çææ¥å¿æäº¤
 * 2. å¤å¶ç¡®è®¤ï¼ç­å¾æå®æ°éçå¯æ¬èç¹ç¡®è®¤åæä½
 * 3. è¶æ¶å¤çï¼å¨æå®æ¶é´åæ æ³æ»¡è¶³åå³æ³¨æ¡ä»¶æ¶è¿åè¶æ¶éè¯¯
 * 4. æ§è½ç»è®¡ï¼è®°å½ç­å¾æ¶é´åè¶æ¶æ¬¡æ°ç¨äºçæ§åè°ä¼
 * 5. å¼å¸¸å¤çï¼å¤çç­å¾è¿ç¨ä¸­çä¸­æ­åæéåºæ¯
 * 
 * æä¹æ§çº§å«ï¼
 * - NONEï¼ä¸ç­å¾ä»»ä½æä¹æ§ä¿è¯
 * - FSYNCï¼ç­å¾æ°æ®å®å¨å·åå°ç£çæä»¶
 * - JOURNALï¼ç­å¾åæä½è®°å½å°æ¥å¿æä»¶
 * 
 * å¤å¶çº§å«ï¼
 * - w:1ï¼åªéä¸»èç¹ç¡®è®¤ï¼é»è®¤ï¼
 * - w:majorityï¼éè¦å¤§å¤æ°èç¹ç¡®è®¤
 * - w:nï¼éè¦æå®æ°éçèç¹ç¡®è®¤
 * - w:"tagName"ï¼éè¦æå®æ ç­¾éåçèç¹ç¡®è®¤
 * 
 * åæ°è¯´æï¼
 * @param opCtx æä½ä¸ä¸æï¼æä¾æ§è¡ç¯å¢åä¸­æ­æ§å¶
 * @param replOpTime åæä½çå¤å¶æ¶é´æ³ï¼ç¨äºå¤å¶ç¡®è®¤
 * @param writeConcern åå³æ³¨éé¡¹ï¼æå®æä¹æ§åå¤å¶è¦æ±
 * @param result è¾åºåæ°ï¼è¿åç­å¾ç»æåç»è®¡ä¿¡æ¯
 * 
 * è¿åå¼ï¼
 * - Status::OK()ï¼åå³æ³¨æ¡ä»¶æåæ»¡è¶³
 * - ErrorCodes::WriteConcernFailedï¼ç­å¾è¶æ¶
 * - ErrorCodes::UnsatisfiableWriteConcernï¼åå³æ³¨æ¡ä»¶æ æ³æ»¡è¶³
 * - å¶ä»éè¯¯ç ï¼ç­å¾è¿ç¨ä¸­åççå¼å¸¸
 * 
 * æ§è½èèï¼
 * - åå³æ³¨çº§å«è¶é«ï¼ç­å¾æ¶é´è¶é¿
 * - ç½ç»å»¶è¿åèç¹ç¶æå½±åå¤å¶ç¡®è®¤æ¶é´
 * - æ¥å¿å·çåæä»¶åæ­¥å½±åæä¹æ§ç­å¾æ¶é´
 * 
 * è¯¥å½æ°æ¯MongoDBåæä½å¯é æ§ä¿è¯çæ ¸å¿å®ç°ï¼å¹³è¡¡æ§è½åæ°æ®å®å¨æ§ã
 */
Status waitForWriteConcern(OperationContext* opCtx,
                           const OpTime& replOpTime,
                           const WriteConcernOptions& writeConcern,
                           WriteConcernResult* result) {
    // If we are in a direct client that's holding a global lock, then this means it is illegal to
    // wait for write concern. This is fine, since the outer operation should have handled waiting
    // for write concern.
    // ç´æ¥å®¢æ·ç«¯å¨å±éæ£æ¥ï¼
    // å¦æå¤äºææå¨å±éçç´æ¥å®¢æ·ç«¯ä¸­ï¼åç­å¾åå³æ³¨æ¯éæ³ç
    // è¿æ¯å¯ä»¥æ¥åçï¼å ä¸ºå¤å±æä½åºè¯¥å·²ç»å¤çäºåå³æ³¨ç­å¾
    if (opCtx->getClient()->isInDirectClient() &&
        shard_role_details::getLocker(opCtx)->isLocked()) {
        return Status::OK();
    }

    // è°è¯æ¥å¿ï¼è®°å½å¼å§ç­å¾åå³æ³¨çè¯¦ç»ä¿¡æ¯
    // åå«å¤å¶æä½æ¶é´æ³ååå³æ³¨éç½®ï¼ä¾¿äºé®é¢è¯æ­
    LOGV2_DEBUG(22549,
                2,
                "Waiting for write concern. OpTime: {replOpTime}, write concern: {writeConcern}",
                "replOpTime"_attr = replOpTime,
                "writeConcern"_attr = writeConcern.toBSON());

    // Add time waiting for write concern to CurOp.
    // æ§è½ç»è®¡ï¼å°ç­å¾åå³æ³¨çæ¶é´æ·»å å°å½åæä½ç»è®¡ä¸­
    // ç¨äºçæ§åæä½çæ»ä½æ§è½ååå³æ³¨ç­å¾å¼é
    CurOp::get(opCtx)->beginWaitForWriteConcernTimer();
    ScopeGuard finishTiming([&] { CurOp::get(opCtx)->stopWaitForWriteConcernTimer(); });

    // ç³»ç»ç»ä»¶è·åï¼è·åå­å¨å¼æåå¤å¶åè°å¨çå¼ç¨
    // å­å¨å¼æï¼ç¨äºå¤æ­æ¯å¦æ¯ææä¹ååæ§è¡å·çæä½
    // å¤å¶åè°å¨ï¼ç¨äºç­å¾å¤å¶ç¡®è®¤åå¡«ååå³æ³¨éé¡¹
    auto* const storageEngine = opCtx->getServiceContext()->getStorageEngine();
    auto const replCoord = repl::ReplicationCoordinator::get(opCtx);

    // æéç¹æµè¯ï¼å¨ç­å¾åå³æ³¨åæåï¼ç¨äºæµè¯åè°è¯
    // æ³¨æï¼ä¸å¯¹åé¨å®¢æ·ç«¯çæï¼ä»¥åå½±åå¯æ¬éæ­¥è¿ç­å³é®æä½
    if (MONGO_unlikely(hangBeforeWaitingForWriteConcern.shouldFail()) &&
        !opCtx->getClient()->isInDirectClient()) {
        // Respecting this failpoint for internal clients prevents stepup from working properly.
        // This fail point pauses with an open snapshot on the oplog. Some tests pause on this fail
        // point prior to running replication rollback. This prevents the operation from being
        // killed and the snapshot being released. Hence, we release the snapshot here.
        // å¿«ç§éæ¾ï¼éæ¾å½åå¿«ç§ä»¥é¿åé»å¡å¯æ¬éæä½
        // æäºæµè¯å¨å¤å¶åæ»åå¨æ­¤æéç¹æåï¼éè¦éæ¾å¿«ç§é²æ­¢æ­»é
        shard_role_details::replaceRecoveryUnit(opCtx);

        hangBeforeWaitingForWriteConcern.pauseWhileSet();
    }

    // Next handle blocking on disk
    // ç£çæä¹æ§å¤çé¶æ®µï¼å¤çæ°æ®å·çåæ¥å¿åæ­¥
    Timer syncTimer;  // åæ­¥æä½è®¡æ¶å¨ï¼ç¨äºç»è®¡æä¹æ§ç­å¾æ¶é´
    
    // åå³æ³¨éé¡¹å¡«åï¼å¡«åæªè®¾ç½®çåæ­¥æ¨¡å¼éé¡¹
    // å¤å¶åè°å¨æ ¹æ®å½åéç½®ç¡®å®é»è®¤çåæ­¥è¡ä¸º
    WriteConcernOptions writeConcernWithPopulatedSyncMode =
        replCoord->populateUnsetWriteConcernOptionsSyncMode(writeConcern);

    // Waiting for durability (flushing the journal or all files to disk) can throw on interruption.
    // æä¹æ§ç­å¾å¤çï¼å·çåæ¥å¿åæ­¥å¯è½å ä¸­æ­èæåºå¼å¸¸
    try {
        // æ ¹æ®åæ­¥æ¨¡å¼æ§è¡ç¸åºçæä¹æ§æä½
        switch (writeConcernWithPopulatedSyncMode.syncMode) {
            case WriteConcernOptions::SyncMode::UNSET:
                // è´å½éè¯¯ï¼åæ­¥æ¨¡å¼ä¸åºè¯¥æªè®¾ç½®å°è¿é
                LOGV2_FATAL(34410,
                            "Attempting to wait on a WriteConcern with an unset sync option");
            case WriteConcernOptions::SyncMode::NONE:
                // æ åæ­¥è¦æ±ï¼ç´æ¥è·³è¿æä¹æ§ç­å¾
                break;
            case WriteConcernOptions::SyncMode::FSYNC: {
                // æä»¶ç³»ç»åæ­¥æ¨¡å¼ï¼ç­å¾æææ°æ®å·åå°ç£ç
                // 
                // oplogæ´ç­å¾ï¼ç¡®ä¿å¨å·çåæ²¡æoplogç©ºæ´
                // å¯¹äºåæç¥¨èå¯æ¬éï¼è¿ç¡®ä¿åæä½å¨éæ­£å¸¸å³æºåè½å¤ä¿æ
                waitForNoOplogHolesIfNeeded(opCtx);
                
                if (!storageEngine->isEphemeral()) {
                    // æä¹åå­å¨å¼æï¼è®¾ç½®å·çæä»¶æ°ç»è®¡
                    // This field has had a dummy value since MMAP went away. It is undocumented.
                    // Maintaining it so as not to cause unnecessary user pain across upgrades.
                    // å¼å®¹æ§å­æ®µï¼èªMMAPå­å¨å¼æç§»é¤åçèæå¼ï¼ä¿æååå¼å®¹
                    result->fsyncFiles = 1;
                } else {
                    // ä¸´æ¶å­å¨å¼æï¼åªéè¦æäº¤æ¥å¿
                    // We only need to commit the journal if we're durable
                    JournalFlusher::get(opCtx)->waitForJournalFlush(opCtx);
                }
                break;
            }
            case WriteConcernOptions::SyncMode::JOURNAL:
                // æ¥å¿åæ­¥æ¨¡å¼ï¼ç­å¾åæä½è®°å½å°æ¥å¿æä»¶
                //
                // oplogæ´ç­å¾ï¼ç¡®ä¿æ¥å¿å·çåæ²¡æoplogç©ºæ´
                waitForNoOplogHolesIfNeeded(opCtx);
                
                // In most cases we only need to trigger a journal flush without waiting for it
                // to complete because waiting for replication with j:true already tracks the
                // durable point for all data-bearing nodes and thus is sufficient to guarantee
                // durability.
                //
                // One exception is for w:1 writes where we need to wait for the journal flush
                // to complete because we skip waiting for replication for w:1 writes. In fact
                // for multi-voter replica sets, durability of w:1 writes could be meaningless
                // because they may still be rolled back if the primary crashes. Single-voter
                // replica sets, however, can never rollback confirmed writes, thus durability
                // does matter in this case.
                // æ¥å¿å·çç­ç¥ï¼
                // å¤§å¤æ°æåµä¸åªéè§¦åæ¥å¿å·çèæ éç­å¾å®æï¼å ä¸ºå¤å¶ç­å¾å·²ç»è·è¸ªæä¹ç¹
                // 
                // ä¾å¤æåµï¼w:1åæä½éè¦ç­å¾æ¥å¿å·çå®æ
                // - å¤æç¥¨èå¯æ¬éï¼w:1åæä½çæä¹æ§å¯è½æ æä¹ï¼å¯è½è¢«åæ»ï¼
                // - åæç¥¨èå¯æ¬éï¼æ°¸ä¸åæ»å·²ç¡®è®¤åæä½ï¼æä¹æ§å¾éè¦
                if (!writeConcernWithPopulatedSyncMode.needToWaitForOtherNodes()) {
                    // w:1åæä½ï¼ç­å¾æ¥å¿å·çå®æ
                    JournalFlusher::get(opCtx)->waitForJournalFlush(opCtx);
                } else {
                    // éè¦ç­å¾å¶ä»èç¹ï¼åªè§¦åæ¥å¿å·çï¼å¤å¶ç­å¾ä¼å¤çæä¹æ§
                    JournalFlusher::get(opCtx)->triggerJournalFlush();
                }
                break;
        }
    } catch (const DBException& ex) {
        // æä¹æ§ç­å¾å¼å¸¸å¤çï¼è½¬æ¢ä¸ºç¶æç è¿å
        return ex.toStatus();
    }

    // è®°å½åæ­¥æä½èæ¶ï¼ç¨äºæ§è½åæåçæ§
    result->syncMillis = syncTimer.millis();

    // Now wait for replication
    // å¤å¶ç­å¾é¶æ®µï¼ç­å¾å¯æ¬èç¹ç¡®è®¤åæä½

    if (replOpTime.isNull()) {
        // no write happened for this client yet
        // ç©ºæä½æ¶é´ï¼è¡¨ç¤ºæ­¤å®¢æ·ç«¯å°æªåçåæä½ï¼æ éç­å¾å¤å¶
        return Status::OK();
    }

    // needed to avoid incrementing gleWtimeStats SERVER-9005
    // å¤å¶éæ±æ£æ¥ï¼é¿åä¸å¿è¦çç»è®¡è®¡æ°å¢å 
    if (!writeConcernWithPopulatedSyncMode.needToWaitForOtherNodes()) {
        // no desired replication check
        // æ å¤å¶è¦æ±ï¼w:1æç±»ä¼¼æåµï¼ä¸éè¦ç­å¾å¶ä»èç¹
        return Status::OK();
    }

    // Replica set stepdowns and gle mode changes are thrown as errors
    // å¤å¶ç­å¾æ§è¡ï¼ç­å¾æå®æ°éçå¯æ¬èç¹ç¡®è®¤åæä½
    // å¯æ¬éæ­¥è¿ågleæ¨¡å¼ååä¼ä½ä¸ºéè¯¯æåº
    repl::ReplicationCoordinator::StatusAndDuration replStatus =
        replCoord->awaitReplication(opCtx, replOpTime, writeConcernWithPopulatedSyncMode);
    
    // åå³æ³¨å¤±è´¥å¤çï¼å¤çè¶æ¶åæ æ³æ»¡è¶³çæåµ
    if (replStatus.status == ErrorCodes::WriteConcernFailed) {
        // è¶æ¶ç»è®¡ï¼å¢å å¨å±è¶æ¶è®¡æ°å¨
        gleWtimeouts.increment();
        if (!writeConcern.getProvenance().isClientSupplied()) {
            // é»è®¤åå³æ³¨è¶æ¶ï¼å¢å é»è®¤åå³æ³¨è¶æ¶è®¡æ°
            gleDefaultWtimeouts.increment();
        }
        result->err = "timeout";      // è®¾ç½®éè¯¯ä¿¡æ¯
        result->wTimedOut = true;     // æ è®°ä¸ºè¶æ¶
    }
    if (replStatus.status == ErrorCodes::UnsatisfiableWriteConcern) {
        // æ æ³æ»¡è¶³çåå³æ³¨ï¼è®°å½ç»è®¡ä¿¡æ¯
        if (!writeConcern.getProvenance().isClientSupplied()) {
            gleDefaultUnsatisfiable.increment();
        }
    }

    // ç­å¾æ¶é´ç»è®¡ï¼è®°å½å¤å¶ç­å¾çè¯¦ç»ç»è®¡ä¿¡æ¯
    gleWtimeStats.recordMillis(durationCount<Milliseconds>(replStatus.duration));
    result->wTime = durationCount<Milliseconds>(replStatus.duration);

    // ä½¿ç¨çåå³æ³¨è®°å½ï¼ä¿å­å®éä½¿ç¨çåå³æ³¨éç½®
    result->wcUsed = writeConcern;

    // è¿åå¤å¶ç­å¾çæç»ç¶æ
    return replStatus.status;
}

}  // namespace mongo
